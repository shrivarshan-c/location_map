{"ast":null,"code":"/** These methods may break the react binding if called directly */\nconst skipMethods = ['setMaxBounds', 'setMinZoom', 'setMaxZoom', 'setMinPitch', 'setMaxPitch', 'setRenderWorldCopies', 'setProjection', 'setStyle', 'addSource', 'removeSource', 'addLayer', 'removeLayer', 'setLayerZoomRange', 'setFilter', 'setPaintProperty', 'setLayoutProperty', 'setLight', 'setTerrain', 'setFog', 'remove'];\nexport default function createRef(mapInstance, mapLib) {\n  if (!mapInstance) {\n    return null;\n  }\n\n  const map = mapInstance.map;\n  const result = {\n    getMap: () => map,\n    // Overwrite getters to use our shadow transform\n    getCenter: () => mapInstance.transform.center,\n    getZoom: () => mapInstance.transform.zoom,\n    getBearing: () => mapInstance.transform.bearing,\n    getPitch: () => mapInstance.transform.pitch,\n    getPadding: () => mapInstance.transform.padding,\n    getBounds: () => mapInstance.transform.getBounds(),\n    project: lnglat => {\n      return mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat));\n    },\n    unproject: point => {\n      return mapInstance.transform.pointLocation(mapLib.Point.convert(point));\n    }\n  };\n\n  for (const key of getMethodNames(map)) {\n    // @ts-expect-error\n    if (!(key in result) && !skipMethods.includes(key)) {\n      result[key] = map[key].bind(map);\n    }\n  }\n\n  return result;\n}\n\nfunction getMethodNames(obj) {\n  const result = new Set();\n  let proto = obj;\n\n  while (proto) {\n    for (const key of Object.getOwnPropertyNames(proto)) {\n      if (key[0] !== '_' && typeof obj[key] === 'function' && key !== 'fire' && key !== 'setEventedParent') {\n        result.add(key);\n      }\n    }\n\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Array.from(result);\n}","map":{"version":3,"mappings":"AAGA;AACA,MAAMA,WAAW,GAAG,CAClB,cADkB,EAElB,YAFkB,EAGlB,YAHkB,EAIlB,aAJkB,EAKlB,aALkB,EAMlB,sBANkB,EAOlB,eAPkB,EAQlB,UARkB,EASlB,WATkB,EAUlB,cAVkB,EAWlB,UAXkB,EAYlB,aAZkB,EAalB,mBAbkB,EAclB,WAdkB,EAelB,kBAfkB,EAgBlB,mBAhBkB,EAiBlB,UAjBkB,EAkBlB,YAlBkB,EAmBlB,QAnBkB,EAoBlB,QApBkB,CAApB;AA2BA,eAAc,SAAUC,SAAV,CAAoBC,WAApB,EAAyCC,MAAzC,EAAoD;EAChE,IAAI,CAACD,WAAL,EAAkB;IAChB,OAAO,IAAP;EACD;;EAED,MAAME,GAAG,GAAcF,WAAW,CAACE,GAAnC;EACA,MAAMC,MAAM,GAAQ;IAClBC,MAAM,EAAE,MAAMF,GADI;IAGlB;IACAG,SAAS,EAAE,MAAML,WAAW,CAACM,SAAZ,CAAsBC,MAJrB;IAKlBC,OAAO,EAAE,MAAMR,WAAW,CAACM,SAAZ,CAAsBG,IALnB;IAMlBC,UAAU,EAAE,MAAMV,WAAW,CAACM,SAAZ,CAAsBK,OANtB;IAOlBC,QAAQ,EAAE,MAAMZ,WAAW,CAACM,SAAZ,CAAsBO,KAPpB;IAQlBC,UAAU,EAAE,MAAMd,WAAW,CAACM,SAAZ,CAAsBS,OARtB;IASlBC,SAAS,EAAE,MAAMhB,WAAW,CAACM,SAAZ,CAAsBU,SAAtB,EATC;IAUlBC,OAAO,EAAGC,MAAD,IAAuB;MAC9B,OAAOlB,WAAW,CAACM,SAAZ,CAAsBa,aAAtB,CAAoClB,MAAM,CAACmB,MAAP,CAAcC,OAAd,CAAsBH,MAAtB,CAApC,CAAP;IACD,CAZiB;IAalBI,SAAS,EAAGC,KAAD,IAAqB;MAC9B,OAAOvB,WAAW,CAACM,SAAZ,CAAsBkB,aAAtB,CAAoCvB,MAAM,CAACwB,KAAP,CAAaJ,OAAb,CAAqBE,KAArB,CAApC,CAAP;IACD;EAfiB,CAApB;;EAkBA,KAAK,MAAMG,GAAX,IAAkBC,cAAc,CAACzB,GAAD,CAAhC,EAAuC;IACrC;IACA,IAAI,EAAEwB,GAAG,IAAIvB,MAAT,KAAoB,CAACL,WAAW,CAAC8B,QAAZ,CAAqBF,GAArB,CAAzB,EAAoD;MAClDvB,MAAM,CAACuB,GAAD,CAAN,GAAcxB,GAAG,CAACwB,GAAD,CAAH,CAASG,IAAT,CAAc3B,GAAd,CAAd;IACD;EACF;;EAED,OAAOC,MAAP;AACD;;AAED,SAASwB,cAAT,CAAwBG,GAAxB,EAA2B;EACzB,MAAM3B,MAAM,GAAG,IAAI4B,GAAJ,EAAf;EAEA,IAAIC,KAAK,GAAGF,GAAZ;;EACA,OAAOE,KAAP,EAAc;IACZ,KAAK,MAAMN,GAAX,IAAkBO,MAAM,CAACC,mBAAP,CAA2BF,KAA3B,CAAlB,EAAqD;MACnD,IACEN,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IACA,OAAOI,GAAG,CAACJ,GAAD,CAAV,KAAoB,UADpB,IAEAA,GAAG,KAAK,MAFR,IAGAA,GAAG,KAAK,kBAJV,EAKE;QACAvB,MAAM,CAACgC,GAAP,CAAWT,GAAX;MACD;IACF;;IACDM,KAAK,GAAGC,MAAM,CAACG,cAAP,CAAsBJ,KAAtB,CAAR;EACD;;EACD,OAAOK,KAAK,CAACC,IAAN,CAAWnC,MAAX,CAAP;AACD","names":["skipMethods","createRef","mapInstance","mapLib","map","result","getMap","getCenter","transform","center","getZoom","zoom","getBearing","bearing","getPitch","pitch","getPadding","padding","getBounds","project","lnglat","locationPoint","LngLat","convert","unproject","point","pointLocation","Point","key","getMethodNames","includes","bind","obj","Set","proto","Object","getOwnPropertyNames","add","getPrototypeOf","Array","from"],"sources":["/home/shri/Desktop/internship/location/mapbox4/get-started-react-maplibre-gl-js/node_modules/react-map-gl/src/mapbox/create-ref.ts"],"sourcesContent":["import type {MapboxMap, LngLatLike, PointLike} from '../types';\nimport type Mapbox from './mapbox';\n\n/** These methods may break the react binding if called directly */\nconst skipMethods = [\n  'setMaxBounds',\n  'setMinZoom',\n  'setMaxZoom',\n  'setMinPitch',\n  'setMaxPitch',\n  'setRenderWorldCopies',\n  'setProjection',\n  'setStyle',\n  'addSource',\n  'removeSource',\n  'addLayer',\n  'removeLayer',\n  'setLayerZoomRange',\n  'setFilter',\n  'setPaintProperty',\n  'setLayoutProperty',\n  'setLight',\n  'setTerrain',\n  'setFog',\n  'remove'\n] as const;\n\nexport type MapRef = {\n  getMap(): MapboxMap;\n} & Omit<MapboxMap, typeof skipMethods[number]>;\n\nexport default function createRef(mapInstance: Mapbox, mapLib: any): MapRef {\n  if (!mapInstance) {\n    return null;\n  }\n\n  const map: MapboxMap = mapInstance.map;\n  const result: any = {\n    getMap: () => map,\n\n    // Overwrite getters to use our shadow transform\n    getCenter: () => mapInstance.transform.center,\n    getZoom: () => mapInstance.transform.zoom,\n    getBearing: () => mapInstance.transform.bearing,\n    getPitch: () => mapInstance.transform.pitch,\n    getPadding: () => mapInstance.transform.padding,\n    getBounds: () => mapInstance.transform.getBounds(),\n    project: (lnglat: LngLatLike) => {\n      return mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat));\n    },\n    unproject: (point: PointLike) => {\n      return mapInstance.transform.pointLocation(mapLib.Point.convert(point));\n    }\n  };\n\n  for (const key of getMethodNames(map)) {\n    // @ts-expect-error\n    if (!(key in result) && !skipMethods.includes(key)) {\n      result[key] = map[key].bind(map);\n    }\n  }\n\n  return result;\n}\n\nfunction getMethodNames(obj) {\n  const result = new Set<string>();\n\n  let proto = obj;\n  while (proto) {\n    for (const key of Object.getOwnPropertyNames(proto)) {\n      if (\n        key[0] !== '_' &&\n        typeof obj[key] === 'function' &&\n        key !== 'fire' &&\n        key !== 'setEventedParent'\n      ) {\n        result.add(key);\n      }\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Array.from(result);\n}\n"]},"metadata":{},"sourceType":"module"}